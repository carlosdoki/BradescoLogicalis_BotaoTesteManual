{"_id":"966ff319-c7e3-4e22-bc75-269415873f85","version":8,"userEnabled":false,"systemEnabled":true,"rate":{"value":10,"unit":"MINUTES"},"daysOfWeek":["WED","FRI","SAT","MON","THUR","SUN","TUES"],"timeRange":null,"timezone":"UTC","description":"Extrato - IE","startTime":null,"endTime":null,"appKey":"AD-AAB-AAM-RXE","scheduleMode":"NONE","url":null,"script":{"contentType":"INLINE_PYTHON","script":"# -*- coding: utf-8 -*-\n\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions\nfrom selenium.common.exceptions import TimeoutException\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.common.exceptions import NoAlertPresentException\nimport unittest, time, re\nfrom datetime import datetime\n\n\nclass BradescoAgentJob(unittest.TestCase):\n\n    def __init__(self, *args, **kwargs):\n        agencia = kwargs.get('agencia','1382')\n        conta = kwargs.get('conta', '0132002')\n        digito = kwargs.get('digito', '5')\n        senha = kwargs.get('senha', '2394')\n        frase_secreta = kwargs.get('frase_secreta', 'Projeto Bradesco')\n        driver_path = kwargs.get('driver_path', '../chromedriver.exe')\n        implicitly_wait = kwargs.get('implicitly_wait', )\n        base_url = kwargs.get('base_url', 'http://www.bradesco.com.br')\n        title = kwargs.get('title', 'Banco Bradesco')\n        timeout = kwargs.get('timeout', 30)\n\n        self.setUp(agencia=agencia, conta=conta, digito=digito, senha=senha, \n                    frase_secreta=frase_secreta, driver_path=driver_path, base_url=base_url,\\\n                    title=title, implicitly_wait=implicitly_wait, timeout=timeout)\n\n    def setUp(self, agencia=None, conta=None, digito=None, senha=None, \\\n              frase_secreta=None, driver_path=None, base_url=None, title=None, implicitly_wait=None, timeout=30):\n\n        if driver_path is not None : self.driver = webdriver.Chrome(driver_path) \n        if implicitly_wait is not None : self.driver.implicitly_wait(implicitly_wait)\n\n        if base_url is not None : self.base_url = base_url\n        if title is not None : self.title = title\n\n        if agencia is not None : self.agencia = agencia\n        if conta is not None : self.conta = conta\n        if digito is not None : self.digito = digito\n        if senha is not None : self.senha = senha\n        if frase_secreta is not None : self.frase_secreta = frase_secreta\n\n        self.timeout = timeout\n        self.verificationErrors = []\n        self.accept_next_alert = True\n\n    def __del__(self):\n        self.driver.quit()\n        # self.driver.close()\n\n    def __str__(self):\n        return self.title + \" -- Agencia: \"+ self.agencia +\" Conta: \"+ self.conta+ \"-\" + self.digito\n\n    def is_element_present(self, how, what):\n        try: \n            self.driver.find_element(by=how, value=what)\n        except NoSuchElementException as e:\n            print (e) \n            return False\n\n        return True\n    \n    def wait_element_present(self, how, what):\n        for i in range(self.timeout):\n            try:\n                if self.is_element_present(how, what): break\n            except: pass\n            time.sleep(1)\n        else: self.fail(\"time out\")\n\n    def wait_element(self, by, value):\n        try:\n            WebDriverWait(self.driver,self.timeout).until(expected_conditions.presence_of_element_located((by, value)))\n            WebDriverWait(self.driver,self.timeout).until(expected_conditions.visibility_of_element_located((by, value)))\n        except Exception as e: \n            print (e)\n            return False\n        else:\n            return True\n\n    def switch_to_frame(self, index):\n        try:\n            WebDriverWait(self.driver,self.timeout).until(expected_conditions.frame_to_be_available_and_switch_to_it(index))\n        except Exception as e: \n            print (e)\n            return False\n        else:\n            return True\n\n    def wait_element_clickable(self, by, value):\n        try:\n            WebDriverWait(self.driver,self.timeout).until(expected_conditions.element_to_be_clickable((by, value)))\n        except Exception as e: \n            print (e)\n            return False\n        else:\n            return True\n\n\n    def login(self):\n        self.driver.get(self.base_url)\n        assert self.title in self.driver.title\n\n        self.wait_element(By.NAME, 'AGN')\n        self.wait_element(By.NAME, 'CTA')\n        self.wait_element(By.NAME, 'DIGCTA')\n        self.driver.find_element_by_name('AGN').send_keys(self.agencia)\n        self.driver.find_element_by_name('CTA').send_keys(self.conta)\n        self.driver.find_element_by_name('DIGCTA').send_keys(self.digito)\n\n        self.driver.find_element_by_class_name('btn-ok').click()\n\n        self.wait_element(By.ID,'box_titular')\n        self.wait_element_clickable(By.LINK_TEXT,'self.senha[0]')\n\n        self.driver.find_element_by_link_text(self.senha[0]).click()\n        self.driver.find_element_by_link_text(self.senha[1]).click()\n        self.driver.find_element_by_link_text(self.senha[2]).click()\n        self.driver.find_element_by_link_text(self.senha[3]).click()\n\n        # while(not self.wait_element(By.ID,'form_j_fraseSecreta:txtFraseSecreta')):\n        #     if (self.is_element_present(By.XPATH,'//*[@id=\"modalBoxAlertTexto\"]/p[1]/b')):\n\n\n        self.wait_element(By.ID,'form_j_fraseSecreta:txtFraseSecreta')\n\n        self.driver.find_element_by_id('form_j_fraseSecreta:txtFraseSecreta').send_keys(self.frase_secreta)\n        self.driver.find_element_by_id('loginbotoes:botaoAvancar').click()\n\n        self.wait_element(By.ID,'conteudoPrincipal')\n\n        return True\n\n    def logout(self):\n        self.driver.switch_to.default_content()\n        self.wait_element_clickable(By.ID,'_id59')\n        self.driver.find_element_by_id('_id59').click()\n\n        self.switch_to_frame(\"modal_infra_estrutura\")\n        self.wait_element_clickable(By.ID,'_id47')\n        self.driver.find_element_by_id('_id47').click()\n        self.wait_element(By.ID,'mensagemLogoff')\n\n        return True\n\n    def extrato(self):\n        # self.driver.switch_to.default_content()\n\n        ## Extrato 5 dias\n        self.wait_element_clickable(By.ID,'topmenu_S')\n        self.driver.find_element_by_id('topmenu_S').click()\n        \n        self.switch_to_frame('paginaCentral')\n        \n        self.wait_element(By.XPATH, \"//li[@class='SEC']/a\")\n        self.driver.find_element_by_xpath(\"//li[@class='SEC']/a\").click()\n\n        self.wait_element(By.ID,'fEx:divMaster')\n        self.wait_element_clickable(By.ID,'fEx:viewFiltroBusca:_id90')\n        self.driver.find_element_by_id('fEx:viewFiltroBusca:_id90').click()\n\n        self.wait_element(By.CLASS_NAME,'conteudo_impressao_extrato')\n\n        ## Extrato CC - Mes\n        self.driver.switch_to.default_content()\n        \n        self.wait_element(By.XPATH,\"//a[contains(@href, 'mapaServicosSaldoExtrato')]\")\n        self.driver.find_element_by_xpath(\"//a[contains(@href, 'mapaServicosSaldoExtrato')]\").click()\n\n        self.switch_to_frame('paginaCentral')\n\n        self.wait_element(By.XPATH, \"//li[@class='SMC']/a\")\n        self.driver.find_element_by_xpath(\"//li[@class='SMC']/a\").click()\n\n        self.wait_element(By.ID,'formFiltroMensal:opcaoData0')\n        self.driver.find_element_by_id(\"formFiltroMensal:opcaoData0\").click()\n        \n        self.wait_element_clickable(By.ID,'formFiltroMensal:mes')\n        Select(self.driver.find_element_by_id(\"formFiltroMensal:mes\")).select_by_index(datetime.now().month)\n\n        self.wait_element_clickable(By.ID,\"formFiltroMensal:botaoBuscar\")\n        self.driver.find_element_by_id(\"formFiltroMensal:botaoBuscar\").click()\n        self.wait_element(By.CLASS_NAME,'conteudo_impressao_extrato')\n\n        ## Extrato CP - Mes\n        self.driver.switch_to.default_content()\n        \n        self.wait_element(By.XPATH,\"//a[contains(@href, 'mapaServicosSaldoExtrato')]\")\n        self.driver.find_element_by_xpath(\"//a[contains(@href, 'mapaServicosSaldoExtrato')]\").click()\n\n        self.switch_to_frame('paginaCentral')\n\n        self.wait_element(By.XPATH, \"(//li[@class='SMP']/a)\")\n        self.driver.find_element_by_xpath(\"(//li[@class='SMP']/a)\").click()\n\n        self.wait_element(By.ID,'formFiltroMensal:opcaoData0')\n        self.driver.find_element_by_id(\"formFiltroMensal:opcaoData0\").click()\n        \n        self.wait_element_clickable(By.ID,'formFiltroMensal:mes')\n        Select(self.driver.find_element_by_id(\"formFiltroMensal:mes\")).select_by_index(datetime.now().month)\n\n        self.wait_element_clickable(By.ID,\"formFiltroMensal:botaoBuscar\")\n        self.driver.find_element_by_id(\"formFiltroMensal:botaoBuscar\").click()\n        self.wait_element(By.CLASS_NAME,'conteudo_impressao_extrato')\n\n        self.driver.switch_to.default_content()\n\n\nif __name__ == \"__main__\":\n    job = BradescoAgentJob()\n\n    job.login()\n    job.extrato()\n    job.logout()\n\n    del job\n"},"browserCodes":["IE11"],"locationCodes":["LOGCP001:BancoBradescoSA-a0Q3400000EqtBEEAZ"],"failOnPageError":true,"captureVisualMetrics":true,"simulateMobileBrowser":false,"networkProfile":{"name":"Native","downloadKbps":5000,"uploadKbps":1000,"roundtripTimeMillis":28,"packetLossPercent":0,"isDefault":false},"timeoutSeconds":180,"state":{"lastFireTime":"2018-11-09T16:13:12.000Z","nextFireTime":null},"projectedUsage":{"projectedDailyRuns":144,"projectedMonthlyRuns":4320},"performanceCriteria":{"retestOnWarning":false,"retestOnCritical":false,"criterion":[]},"composableConfig":{"resourceErrorDetection":{"ignoreWhen":{"resourceUrlContains":[],"resourceMimeType":[]},"onlyWhen":{"resourceUrlContains":[],"resourceMimeType":[]}}},"created":"2018-11-09T16:04:51.830Z","updated":"2018-11-09T16:16:23.001Z"}